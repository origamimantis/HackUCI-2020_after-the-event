"use strict";

describe("imergo-om-base#ImergoClass", () =>
{
    const assert = require("assert");
    const iob = require("..");
    const uuid = require("uuid");
    const Foo = require("./helpers/Foo");
    it("should initialize an object of type ImergoClass", () =>
    {
        const obj = new iob.ImergoClass();
        assert.equal(obj instanceof iob.ImergoClass, true);
    });
    it("should initialize an object with config", () =>
    {
        const id = uuid.v1();
        const obj = new iob.ImergoClass({
            test: 10,
            id: id
        });
        assert.equal(obj instanceof iob.ImergoClass, true);
        assert.equal(typeof obj.test === "undefined", true);
        assert.equal(Object.getOwnPropertyNames(obj).length, 1);
        assert.equal(obj.id === id, true);
    });
    it("should initialize an Foo class with config", () =>
    {
        const obj = new Foo({
            test: 10,
            enabled: false
        });
        assert.equal(obj instanceof iob.ImergoClass, true);
        assert.equal(typeof obj.test === "undefined", true);
        assert.equal(obj.enabled === false, true);
        assert.equal(obj.id === "id", false);
        assert.equal(obj.name === "foo", true);
        assert.equal(Object.keys(obj).length, 8);
    });
    it("should toJSON remove _ from properties", () =>
    {
        const obj = new Foo();
        assert.equal(obj instanceof iob.ImergoClass, true);
        assert.equal(obj.id === "undefined", false);
        //console.log(JSON.stringify(obj));
    });
    it("should clone", () =>
    {
        const foo = new Foo();
        const clone = foo.clone();
        assert.equal(clone instanceof Foo, true);
        assert.equal(clone.imergoObject instanceof iob.ImergoClass, true);
        assert.equal(clone.toJSON().imergoObject.id === undefined, false);
    });
    it("should toJSON maps arrays with ImergoClass", () =>
    {
        const foo = new Foo({
            imergoObjects: [new iob.ImergoClass(), new iob.ImergoClass()]
        });
        const clone = foo.clone();
        assert.deepEqual(clone, foo);
        assert.equal(clone.toJSON().imergoObject.id === undefined, false);
        assert.equal(foo.imergoObjects.length, 2);
        assert.equal(clone.imergoObjects.length, 2);
        assert.equal(clone.imergoObjects[0] instanceof iob.ImergoClass, true);
        //console.log(JSON.stringify(foo));
    });
    it("should toJSON maps with ImergoClass", () =>
    {
        const o1 = new iob.ImergoClass();
        const foo = new Foo();
        foo.maps.set("first", o1);
        const toJSON = JSON.parse(JSON.stringify(foo));
        const fooNew = new Foo(toJSON);
        assert.equal(fooNew instanceof Foo, true);
        assert.equal(fooNew.maps instanceof Map, true);
        assert.equal(fooNew.maps.get("first") instanceof iob.ImergoClass, true);
    });
});